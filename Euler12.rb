# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require 'mathn'

# def num_of_divisors(num)
#   divisors = 0
#   Prime.first(num).reverse.each do |prime|
#     if num % prime == 0
#       num = num / prime
#       divisors += 1
#       #prime is
#     else
#       #next
#     end
#   end
#   divisors + 1 #because you have the left over 'num'.
# end

def factors_of(number)
  primes, powers = number.prime_division.transpose
  exponents = powers.map{|i| (0..i).to_a}
  divisors = exponents.shift.product(*exponents).map do |powers|
    primes.zip(powers).map{|prime, power| prime ** power}.inject(:*)
  end
  divisors.sort.map{|div| [div, number / div]}
end

i = d = 1

while d < 500 do
  d = factors_of(i).count
  i+=1
  p "#{i} has #{d}"
end
p "the answer = #{i}"

